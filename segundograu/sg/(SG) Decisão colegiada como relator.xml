<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Decisão colegiada como relator">
    <description><![CDATA[Código do fluxo: SG_DECCOLREL.

Descrição: Fluxo destinado a preparação de decisões colegiadas como relator do processo.

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessor
            Assessoria Segundo Grau  Assessor Chefe
            Assessoria Segundo Grau  Assessor para Votação Antecipada
            Gabinete Segundo Grau    Magistrado
            Assessoria Segundo Grau  Assessor Geral
Magistrado  Assessoria Segundo Grau  Assessor
            Assessoria Segundo Grau  Assessor Chefe
            Assessoria Segundo Grau  Assessor para Votação Antecipada
            Gabinete Segundo Grau    Magistrado
            Assessoria Segundo Grau  Assessor Geral...]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469,600:5898,600:5899,600:5907,5:5197,6:1469,5:5898,5:5899,5:5907')}"/>
    </swimlane>
    <swimlane name="Redação judiciária">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:5031,6:5031,5:5031,8:5031')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (SG) Decisão colegiada como relator">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469,600:5898,600:5899,600:5907,5:5197,6:1469,5:5898,5:5899,5:5907')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('8:5031')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria" priority="3"/>
        <transition to="(SG) Encaminhar para o Programa Prático?" name="(SG) Encaminhar para o Programa Prático?"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) Voto, relatório e ementa - MINUTAR">
        <task name="(SG) Voto, relatório e ementa - MINUTAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: #{tramitacaoProcessualService.recuperaVariavel('sg:deccolrel:decisaoColegiadaVazia') == true ? '*** ATENÇÃO! *** Voto, relatório e ementa são obrigatórios para prosseguir. Movimentação cancelada!' : ''}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: WEB-INF_xhtml_flx_votacaoColegiado
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

3. Variável: aviso1
   Label: *ATENÇÃO* É necessário inserir o dispositivo do acórdão logo abaixo do texto da ementa.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

4. Variável: MovimentarEmLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Registrar cancelamento de decisão colegiada" name="Alterar escolha do tipo de conclusão"/>
        <transition to="(SG) Voto, relatório ou ementa vazio?" name="Encaminhar para confirmação">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:deccolrel:enviarMagistrado', false)}"/>
        </transition>
        <transition to="(SG) Voto, relatório ou ementa vazio?" name="Encaminhar para validação do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:deccolrel:enviarMagistrado', true)}"/>
        </transition>
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="Aguardar sessão de julgamento">
            <condition expression="#{(tramitacaoProcessualService.recuperaProcesso().selecionadoJulgamento or tramitacaoProcessualService.recuperaProcesso().selecionadoPauta) or ( not empty processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') and  processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') != 'julgado')}"/>
        </transition>
        <transition to="(SG) Pode solicitar inclusão em pauta?" name="Solicitar inclusão em pauta">
            <condition expression="#{(not (tramitacaoProcessualService.recuperaProcesso().selecionadoPauta or tramitacaoProcessualService.recuperaProcesso().selecionadoJulgamento)) and votacaoColegiadoAction.isRelatorioAssinado()}"/>
        </transition>
        <transition to="(SG) Registrar aptidão para inclusão em mesa" name="Solicitar inclusão em mesa">
            <condition expression="#{(not (tramitacaoProcessualService.recuperaProcesso().selecionadoPauta or tramitacaoProcessualService.recuperaProcesso().selecionadoJulgamento)) and votacaoColegiadoAction.isRelatorioAssinado()}"/>
        </transition>
        <transition to="(SG) Sinalizar manualmente o julgamento" name="Encaminhar manualmente para preparação do acórdão">
            <condition expression="#{sessaoPautaProcessoTrfManager.isProcessoJulgadoUltimaSessao(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')))}"/>
        </transition>
        <transition to="(SG) Encaminhar para o programa prático" name="Encaminhar para o programa prático">
            <condition expression="#{parametroUtil.getParametro('pje:tjrn:idOjProgPratico').contains('_'.concat(tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgador().getIdOrgaoJulgador()).concat('_'))}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:deccolrel:decisaoColegiadaVazia')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Alterar escolha do tipo de conclusão,Encaminhar para o programa prático')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:progprat:encam') == true ? '(SG) Encaminhar para o programa prático' : '(SG) Voto, relatório e ementa - MINUTAR'}" name="(SG) Encaminhar para o Programa Prático?">
        <transition to="(SG) Voto, relatório e ementa - MINUTAR" name="(SG) Voto, relatório e ementa - MINUTAR"/>
        <transition to="(SG) Encaminhar para o programa prático" name="(SG) Encaminhar para o programa prático"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:progprat:encam')}"/>
        </event>
    </decision>
    <process-state name="(SG) Encaminhar para o programa prático">
        <sub-process name="(SG) Decisão colegiada como relator [Programa Prático]" binding="late"/>
        <transition to="(SG) Retornar para minuta de voto, relatório e ementa pelo gab. de origem" name="(SG) Retornar para minuta de voto, relatório e ementa pelo gab. de origem"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:progprat:conclusao_cancelada') == false ? '(SG) Apagar variáveis do fluxo' : (tramitacaoProcessualService.recuperaVariavel('sg:progprat:dec_col_cancelada') == true ? '(SG) Voto, relatório e ementa - MINUTAR' : '(SG) Voto, relatório e ementa - VALIDAR')}" name="(SG) Retornar para minuta de voto, relatório e ementa pelo gab. de origem">
        <transition to="(SG) Voto, relatório e ementa - MINUTAR" name="(SG) Voto, relatório e ementa - MINUTAR"/>
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="(SG) Voto, relatório e ementa - VALIDAR"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="(SG) Apagar variáveis do fluxo"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:progprat:conclusao_cancelada')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:progprat:dec_col_cancelada')}"/>
        </event>
    </decision>
    <decision expression="#{(entityManager.createQuery(&quot;SELECT COUNT(DISTINCT pd.tipoProcessoDocumento.idTipoProcessoDocumento) FROM ProcessoDocumento pd WHERE NOT EXISTS (SELECT DISTINCT pd.tipoProcessoDocumento.idTipoProcessoDocumento FROM ProcessoDocumentoBinPessoaAssinatura pdba WHERE pdba.processoDocumentoBin.idProcessoDocumentoBin = pd.processoDocumentoBin.idProcessoDocumentoBin) AND pd.processo.idProcesso = :processo AND pd.ativo=true AND pd.tipoProcessoDocumento.idTipoProcessoDocumento IN (77,73,72)&quot;).setParameter(&quot;processo&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() == 3 ? (tramitacaoProcessualService.recuperaVariavel('sg:deccolrel:enviarMagistrado') == true ? '(SG) Voto, relatório e ementa - VALIDAR' : '(SG) Voto, relatório e ementa - CONFIRMAR') : '(SG) Voto, relatório e ementa - MINUTAR')}" name="(SG) Voto, relatório ou ementa vazio?">
        <transition to="(SG) Voto, relatório e ementa - MINUTAR" name="(SG) Voto, relatório e ementa - MINUTAR">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:deccolrel:decisaoColegiadaVazia', true)}"/>
        </transition>
        <transition to="(SG) Voto, relatório e ementa - CONFIRMAR" name="(SG) Voto, relatório e ementa - CONFIRMAR">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:deccolrel:decisaoColegiadaVazia', false)}"/>
        </transition>
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="(SG) Voto, relatório e ementa - VALIDAR">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:deccolrel:decisaoColegiadaVazia', false)}"/>
        </transition>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:deccolrel:enviarMagistrado')}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="(SG) Voto, relatório e ementa - CONFIRMAR">
        <task name="(SG) Voto, relatório e ementa - CONFIRMAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoColegiado
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="Encaminhar para validação do magistrado"/>
        <transition to="(SG) Voto, relatório e ementa - MINUTAR" name="Retornar à assessoria para minutar"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao', false)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Voto, relatório e ementa - VALIDAR">
        <task name="(SG) Voto, relatório e ementa - VALIDAR" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoColegiado
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: aviso1
   Label: #{tramitacaoProcessualService.recuperaVariavel('sg:deccolrel:RelatorioNaoAssinado') == true ? '*** ATENÇÃO! *** Para solicitar inclusão em pauta, é necessário que o relatório esteja assinado.' : ''}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto, relatório e ementa - MINUTAR" name="Retornar à assessoria para minutar"/>
        <transition to="(SG) Voto, relatório e ementa - CONFIRMAR" name="Retornar à assessoria para confirmar"/>
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="Aguardar sessão de julgamento">
            <condition expression="#{(tramitacaoProcessualService.recuperaProcesso().selecionadoJulgamento or tramitacaoProcessualService.recuperaProcesso().selecionadoPauta) or ( not empty processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') and  processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') != 'julgado')}"/>
        </transition>
        <transition to="(SG) Houve disponibilização aos demais gabinetes?" name="Liberar para votação antecipada">
            <condition expression="#{empty tramitacaoProcessualService.recuperaVariavel('pje:flx:colegiado:disponibilizado')}"/>
        </transition>
        <transition to="(SG) Pode solicitar inclusão em pauta?" name="Solicitar inclusão em pauta">
            <condition expression="#{not (tramitacaoProcessualService.recuperaProcesso().selecionadoPauta or tramitacaoProcessualService.recuperaProcesso().selecionadoJulgamento)}"/>
        </transition>
        <transition to="(SG) Pode liberar ao revisor?" name="Encaminhar ao revisor">
            <condition expression="#{parametroUtil.getParametro('pje:tjrn:classesCriminais').contains('_'.concat(tramitacaoProcessualService.recuperaProcesso().classeJudicial.codClasseJudicial).concat('_'))}"/>
        </transition>
        <transition to="(SG) Sinalizar manualmente o julgamento" name="Encaminhar manualmente para preparação do acórdão">
            <condition expression="#{sessaoPautaProcessoTrfManager.isProcessoJulgadoUltimaSessao(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')))}"/>
        </transition>
        <transition to="(SG) Registrar aptidão para inclusão em mesa" name="Solicitar inclusão em mesa"/>
        <transition to="(SG) Registrar aptidão para julgamento" name="Solicitar inclusão em pauta sem assinatura de relatório">
            <condition expression="#{parametroUtil.getParametro('pje:tjrn:SolicitarPautaSemAssRel').contains(' '.concat(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).concat(' '))}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:deccolrel:RelatorioNaoAssinado')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao', false)}"/>
        </event>
    </task-node>
    <decision expression="#{votacaoColegiadoAction.isRelatorioAssinado() ? '(SG) Registrar aptidão para julgamento' : '(SG) Voto, relatório e ementa - VALIDAR'}" name="(SG) Pode solicitar inclusão em pauta?">
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="(SG) Voto, relatório e ementa - VALIDAR">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:deccolrel:RelatorioNaoAssinado', true)}"/>
        </transition>
        <transition to="(SG) Registrar aptidão para julgamento" name="(SG) Registrar aptidão para julgamento"/>
    </decision>
    <decision expression="#{votacaoColegiadoAction.isRelatorioAssinado() ? '(SG) Envio ao revisor' : '(SG) Voto, relatório e ementa - VALIDAR'}" name="(SG) Pode liberar ao revisor?">
        <transition to="(SG) Envio ao revisor" name="(SG) Envio ao revisor"/>
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="(SG) Voto, relatório e ementa - VALIDAR"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Votação antecipada - AGUARDAR">
        <task name="(SG) Votação antecipada - AGUARDAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="Retornar para validação do relatório, voto e ementa"/>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Houve julgamento?" name="(SG) Houve julgamento?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Sinalizar manualmente o julgamento" name="Encaminhar manualmente para preparação do acórdão">
            <condition expression="#{sessaoPautaProcessoTrfManager.isProcessoJulgadoUltimaSessao(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')))}"/>
        </transition>
        <transition to="(SG) Pode solicitar inclusão em pauta?" name="Solicitar inclusão em pauta">
            <condition expression="#{not processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')).selecionadoPauta}"/>
        </transition>
        <transition to="(SG) Registrar aptidão para inclusão em mesa" name="Solicitar inclusão em mesa"/>
        <transition to="(SG) Lançar movimentação de retirada de aptidão de julgamento" name="Pedir retirada de julgamento">
            <condition expression="#{processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')).selecionadoPauta and not empty sessaoProcessoDocumentoManager.recuperaElementosJulgamento(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')), null, authenticator.getOrgaoJulgadorAtual(), false, false) and sessaoProcessoDocumentoManager.recuperaElementosJulgamento(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')), null, authenticator.getOrgaoJulgadorAtual(), false, false).get(0).sessao.dataFechamentoPauta == null }"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao:relator')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao:relator', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Houve julgamento?')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Retornar para confirmação do relatório, voto e ementa, Encaminhar manualmente para preparação do acórdão')}"/>
        </event>
    </task-node>
    <process-state name="(SG) Envio ao revisor">
        <sub-process name="(SG) Encaminhamento ao revisor" binding="late"/>
        <transition to="(SG) Revisão cancelada?" name="(SG) Revisão cancelada?"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:encrevisor:revisaoCancelada') == true ? '(SG) Voto, relatório e ementa - VALIDAR' : '(SG) Registrar aptidão para julgamento'}" name="(SG) Revisão cancelada?">
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="(SG) Voto, relatório e ementa - VALIDAR"/>
        <transition to="(SG) Registrar aptidão para julgamento" name="(SG) Registrar aptidão para julgamento"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:encrevisor:revisaoCancelada')}"/>
        </event>
    </decision>
    <node name="(SG) Registrar aptidão para julgamento">
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="(SG) Sessão de julgamento - AGUARDAR"/>
        <event type="node-enter">
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, true)}"/>
            <action expression="#{preencherMovimento.deCodigo(20000027).lancarMovimento()}"/>
        </event>
    </node>
    <node name="(SG) Lançar movimentação de retirada de aptidão de julgamento">
        <transition to="(SG) Retirar aptidão para julgamento" name="(SG) Retirar aptidão para julgamento"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(20000028).lancarMovimento()}"/>
            <action expression="#{processoJudicialService.sinalizarFluxo(tramitacaoProcessualService.recuperaProcesso(), 'sg:finalizarVotoVogal', true, false, true, 'sg:deccolrel:pedido_retirada_pauta=true')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:flx:colegiado:disponibilizado')}"/>
        </event>
    </node>
    <node name="(SG) Retirar aptidão para julgamento">
        <transition to="(SG) Retirado de pauta - ANALISAR" name="(SG) Retirado de pauta - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, false)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(SG) Sessão de julgamento - AGUARDAR">
        <task name="(SG) Sessão de julgamento - AGUARDAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="Retornar para validação do relatório, voto e ementa"/>
        <transition to="(SG) Renovar pedido de inclusão em pauta" name="Solicitar inclusão em pauta">
            <condition expression="#{not processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')).selecionadoPauta}"/>
        </transition>
        <transition to="(SG) Houve julgamento?" name="(SG) Houve julgamento?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Sinalizar manualmente o julgamento" name="Encaminhar manualmente para preparação do acórdão">
            <condition expression="#{sessaoPautaProcessoTrfManager.isProcessoJulgadoUltimaSessao(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')))}"/>
        </transition>
        <transition to="(SG) Houve disponibilização aos demais gabinetes?" name="Liberar para votação antecipada">
            <condition expression="#{empty tramitacaoProcessualService.recuperaVariavel('pje:flx:colegiado:disponibilizado')}"/>
        </transition>
        <transition to="(SG) Lançar movimentação de retirada de aptidão de julgamento" name="Pedir retirada de julgamento">
            <condition expression="#{processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')).selecionadoPauta and not empty sessaoProcessoDocumentoManager.recuperaElementosJulgamento(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')), null, authenticator.getOrgaoJulgadorAtual(), false, false) and sessaoProcessoDocumentoManager.recuperaElementosJulgamento(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')), null, authenticator.getOrgaoJulgadorAtual(), false, false).get(0).sessao.dataFechamentoPauta == null }"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao:relator')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao:relator', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Houve julgamento?')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Encaminhar manualmente para preparação do acórdão')}"/>
        </event>
    </task-node>
    <node name="(SG) Renovar pedido de inclusão em pauta">
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="(SG) Sessão de julgamento - AGUARDAR"/>
        <event type="node-enter">
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, true)}"/>
            <action expression="#{preencherMovimento.deCodigo(20000027).lancarMovimento()}"/>
        </event>
    </node>
    <node name="(SG) Sinalizar manualmente o julgamento">
        <transition to="(SG) Gabinete do relator foi o vencedor?" name="(SG) Gabinete do relator foi o vencedor?"/>
        <event type="node-enter">
            <action expression="#{org.jboss.seam.core.events.raiseEvent('pje:colegiado:processo:julgado',sessaoPautaProcessoTrfManager.getSessaoPautaProcessoTrfJulgado(processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo'))).idSessaoPautaProcessoTrf)}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pje:flx:colegiado:disponibilizado') ? '(SG) Votação antecipada - AGUARDAR' : '(SG) Disponibilizar para demais gabinetes'}" name="(SG) Houve disponibilização aos demais gabinetes?">
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="(SG) Sessão de julgamento - AGUARDAR"/>
        <transition to="(SG) Disponibilizar para demais gabinetes" name="(SG) Disponibilizar para demais gabinetes"/>
        <event type="node-enter">
            <action expression="#{sessaoProcessoDocumentoManager.liberarDocumentosSessao(processoTrfHome.instance, processoTrfHome.instance.orgaoJulgador, null)}"/>
        </event>
    </decision>
    <node name="(SG) Disponibilizar para demais gabinetes">
        <transition to="(SG) Votação antecipada - AGUARDAR" name="(SG) Votação antecipada - AGUARDAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:flx:colegiado:disponibilizado', true)}"/>
        </event>
        <event type="node-enter">
            <action expression="#{sessaoJulgamentoServiceCNJ.criarFluxoDemaisJulgadores(tramitacaoProcessualService.recuperaProcesso(),'SG_DECCOLNREL')}"/>
        </event>
    </node>
    <decision expression="#{ empty processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') ? 'situacao padrao' : processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao')}" name="(SG) Houve julgamento?">
        <transition to="(SG) Gabinete do relator foi o vencedor?" name="julgado"/>
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="adiado"/>
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="situacao padrao"/>
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="pedidoVista"/>
        <transition to="(SG) Retirar aptidão para julgamento" name="retiradoJulgamento"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Retirado de pauta - ANALISAR">
        <task name="(SG) Retirado de pauta - ANALISAR" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: aviso1
   Label: Este processo foi retirado de pauta. Informe na próxima ação como deseja prosseguir.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="(SG) Pode solicitar inclusão em pauta?" name="Registrar nova solicitação de inclusão em pauta"/>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Registrar cancelamento de decisão colegiada" name="Alterar tipo de conclusão"/>
        <transition to="(SG) Registrar aptidão para inclusão em mesa" name="Registrar nova solicitação de inclusão em mesa"/>
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="Encaminhar para validação do magistrado"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') and tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') == tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador ? '(SG) Acórdão [Inteiro Teor] - CONFERIR' : '(SG) Deslocar órgão ao relator pro acórdão'}" name="(SG) Gabinete do relator foi o vencedor?">
        <transition to="(SG) Deslocar órgão ao relator pro acórdão" name="(SG) Deslocar órgão ao relator pro acórdão"/>
        <transition to="(SG) Acórdão [Inteiro Teor] - CONFERIR" name="(SG) Acórdão [Inteiro Teor] - CONFERIR"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Acórdão [Inteiro Teor] - CONFERIR">
        <task name="(SG) Acórdão [Inteiro Teor] - CONFERIR" swimlane="Redação judiciária" priority="3">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read"/>
                <variable name="WEB-INF_xhtml_flx_elaborarAcordao" mapped-name="frame:WEB-INF_xhtml_flx_elaborarAcordao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. aviso1
   Label: PROCLAMAÇÃO DE JULGAMENTO:
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. aviso1
   Label: #{elaborarAcordaoAction.getProclamacaoDecisao()}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

3.Variável: WEB-INF_xhtml_flx_votacaoColegiado
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em lote

*Eventos de tarefa*

1. Sair Tarefa
   Agrupamento eventos: Julgamento
   Condições de lançamento temporário: #{true}]]></description>
        <transition to="(SG) Acórdão [Inteiro Teor] - REVISAR" name="Encaminhar para revisão do acórdão pela assessoria"/>
        <transition to="(SG) Acórdão [Inteiro Teor] - ASSINAR" name="Encaminhar para assinatura do acórdão"/>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Registrar aptidão para julgamento" name="Registrar nova aptidão para julgamento">
            <condition expression="#{ parametroUtil.getParametro('pje:tjrn:registrarNovaAptidao').contains('_'.concat(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).concat('_')) }"/>
        </transition>
        <transition to="(SG) Acórdão revisado?" name="Acórdão já assinado!">
            <condition expression="#{ parametroUtil.getParametro('pje:tjrn:AcordaoAssinado').contains('_'.concat(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).concat('_')) }"/>
        </transition>
        <event type="task-start">
            <action/>
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:voto:permiteIncluir')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteIncluir')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:voto:permiteIncluir', true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteIncluir', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:acordaorevisado', true)}"/>
        </event>
    </task-node>
    <node name="(SG) Deslocar órgão ao relator pro acórdão">
        <transition to="(SG) Acórdão [Inteiro Teor] - REVISAR" name="(SG) Acórdão [Inteiro Teor] - REVISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
        </event>
        <event type="node-enter">
            <action expression="#{processInstance.contextInstance.setVariable('pje:fluxo:deslocamento:orgaoDestino', processInstance.contextInstance.getVariable('pje:fluxo:colegiado:orgaoVencedor:id'))}"/>
            <action expression="#{processInstance.contextInstance.setVariable('pje:fluxo:deslocamento:orgaoCargoDestino', processInstance.contextInstance.getVariable('pje:fluxo:colegiado:cargoVencedor:id'))}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(SG) Acórdão [Inteiro Teor] - REVISAR">
        <task name="(SG) Acórdão [Inteiro Teor] - REVISAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="WEB-INF_xhtml_flx_elaborarAcordao" mapped-name="frame:WEB-INF_xhtml_flx_elaborarAcordao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_elaborarAcordao
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em lote

*Eventos de tarefa*

1. Sair Tarefa
   Agrupamento eventos: Julgamento
   Condições de lançamento temporário: #{true}]]></description>
        <transition to="(SG) Acórdão [Inteiro Teor] - ASSINAR" name="Encaminhar para assinatura do acórdão"/>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Acórdão [Inteiro Teor] - CONFERIR" name="Retornar para revisão pela redação judiciária"/>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:voto:permiteIncluir')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteIncluir')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:voto:permiteIncluir', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteIncluir', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:acordaorevisado', true)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Acórdão [Inteiro Teor] - ASSINAR">
        <task name="(SG) Acórdão [Inteiro Teor] - ASSINAR" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="WEB-INF_xhtml_flx_elaborarAcordao" mapped-name="frame:WEB-INF_xhtml_flx_elaborarAcordao" access="read,write"/>
                <variable name="assinaturaInteiroTeorLote" mapped-name="assinarInteiroTeorLote:assinaturaInteiroTeorLote" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_elaborarAcordao
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame


2. Variável: assinaturaInteiroTeorLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Assinatura Inteiro Teor em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Acórdão [Inteiro Teor] - REVISAR" name="Retornar para revisão do acórdão pela assessoria"/>
        <transition to="(SG) Acórdão [Inteiro Teor] - CONFERIR" name="Retornar pela revisão pela redação judiciária"/>
        <transition to="(SG) Acórdão aguardando movimento de julgamento - LANÇAR" name="Lançar movimentação e enviar à secretaria">
            <condition expression="#{ parametroUtil.getParametro('pje:tjrn:AcordaoAssinadoLancarMovimentacao').contains('_'.concat(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).concat('_')) }"/>
        </transition>
        <transition to="(SG) Acórdão revisado?" name="Acórdão já assinado!">
            <condition expression="#{ parametroUtil.getParametro('pje:tjrn:AcordaoAssinado').contains('_'.concat(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).concat('_')) }"/>
        </transition>
        <transition to="(SG) Acórdão revisado?" name="(SG) Acórdão revisado?">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:voto:permiteIncluir')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteIncluir')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Acórdão revisado?')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:voto:permiteIncluir', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteIncluir', true)}"/>
            <action name="upd" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:acordaorevisado') == true ? '(SG) Lançar movimentação do acórdão' : '(SG) Acórdão aguardando movimento de julgamento - LANÇAR'}" name="(SG) Acórdão revisado?">
        <transition to="(SG) Lançar movimentação do acórdão" name="(SG) Lançar movimentação do acórdão"/>
        <transition to="(SG) Acórdão aguardando movimento de julgamento - LANÇAR" name="(SG) Acórdão aguardando movimento de julgamento - LANÇAR"/>
    </decision>
    <node name="(SG) Lançar movimentação do acórdão">
        <transition to="(SG) Acrescentar situação julgado no processo" name="(SG) Acrescentar situação julgado no processo"/>
        <event type="node-enter">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))}"/>
            <action expression="#{eventsHomologarMovimentosTree.setEventoBeanList(lancadorMovimentosService.getMovimentosTemporarios())}"/>
            <action expression="#{ eventsHomologarMovimentosTree.registraEventosSemFluxo(tramitacaoProcessualService.recuperaProcesso().processo, processoDocumentoManager.findById(tramitacaoProcessualService.recuperaVariavel('minutaEmElaboracao'))) }"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(SG) Acórdão aguardando movimento de julgamento - LANÇAR">
        <task name="(SG) Acórdão aguardando movimento de julgamento - LANÇAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: Selecione o movimento de julgamento abaixo correspondente ao texto do acórdão proferido.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

*Eventos de tarefa*

1. Tipo do evento: Sair Tarefa
   Agrupamento eventos: Julgamento]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como relator" name="Nó de Desvio - (SG) Decisão colegiada como relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Acrescentar situação julgado no processo" name="Lançar movimentação"/>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <node name="(SG) Acrescentar situação julgado no processo">
        <transition to="(SG) Realocar órgão ao relator de origem" name="(SG) Realocar órgão ao relator de origem"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.temSituacao('jus:julgado') ? '' : tramitacaoProcessualService.acrescentarSituacao('jus:julgado')}"/>
        </event>
    </node>
    <node name="(SG) Realocar órgão ao relator de origem">
        <transition to="(SG) Enviar autos à secretaria" name="(SG) Enviar autos à secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
        </event>
    </node>
    <process-state name="(SG) Enviar autos à secretaria">
        <sub-process name="(SG) Preparar ato de comunicação do acórdão" binding="late"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="(SG) Apagar variáveis do fluxo"/>
    </process-state>
    <node name="(SG) Registrar aptidão para inclusão em mesa">
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="(SG) Sessão de julgamento - AGUARDAR"/>
        <event type="node-enter">
            <action name="upd" expression="#{processoJudicialManager.aptidaoParaJulgamento(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, true)}"/>
            <action name="upd" expression="#{preencherMovimento.deCodigo(20000029).lancarMovimento()}"/>
        </event>
    </node>
    <node name="(SG) Registrar cancelamento de decisão colegiada">
        <transition to="(SG) Gravar variável de cancelamento de conclusão" name="(SG) Gravar variável de cancelamento de conclusão"/>
        <event type="node-enter">
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, false)}"/>
        </event>
    </node>
    <node name="(SG) Gravar variável de cancelamento de conclusão">
        <transition to="(SG) Apagar variáveis do fluxo" name="(SG) Apagar variáveis do fluxo"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:conclusao_cancelada', true)}"/>
        </event>
    </node>
    <node name="(SG) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('sg:deccolrel:decisaoColegiadaVazia')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:deccolrel:enviarMagistrado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:flx:colegiado:disponibilizado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:colegiado:orgaoVencedor:id')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:colegiadoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:relator:transicao:cancelamento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sg:deccolrel:RelatorioNaoAssinado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:acordaorevisado')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Decisão colegiada como relator">
        <task name="Nó de Desvio - (SG) Decisão colegiada como relator" swimlane="Nó de Desvio - (SG) Decisão colegiada como relator" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Voto, relatório e ementa - MINUTAR" name="(SG) Voto, relatório e ementa - MINUTAR"/>
        <transition to="(SG) Voto, relatório e ementa - VALIDAR" name="(SG) Voto, relatório e ementa - VALIDAR"/>
        <transition to="(SG) Voto, relatório e ementa - CONFIRMAR" name="(SG) Voto, relatório e ementa - CONFIRMAR"/>
        <transition to="(SG) Sessão de julgamento - AGUARDAR" name="(SG) Sessão de julgamento - AGUARDAR"/>
        <transition to="(SG) Acórdão [Inteiro Teor] - ASSINAR" name="(SG) Acórdão [Inteiro Teor] - ASSINAR"/>
        <transition to="(SG) Acórdão aguardando movimento de julgamento - LANÇAR" name="(SG) Acórdão aguardando movimento de julgamento - LANÇAR"/>
        <transition to="(SG) Votação antecipada - AGUARDAR" name="(SG) Votação antecipada - AGUARDAR"/>
        <transition to="(SG) Acórdão [Inteiro Teor] - REVISAR" name="(SG) Acórdão [Inteiro Teor] - REVISAR"/>
        <transition to="(SG) Acórdão [Inteiro Teor] - CONFERIR" name="(SG) Acórdão [Inteiro Teor] - CONFERIR"/>
        <transition to="(SG) Retirado de pauta - ANALISAR" name="(SG) Retirado de pauta - ANALISAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
