<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(VCiv) Controle do CEJUSC">
    <description><![CDATA[Fluxo responsável pelo controle de processos enviados para conciliação no CEJUSC..................................]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (VCiv) Controle do CEJUSC">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:1338,1342:1469')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,6:5197')}"/>
    </swimlane>
    <swimlane name="CEJUSC">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:5886,5:1338,6:1469,6:5197')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(CEJUSC) É CEJUSC ?" name="É intimar CEJUSC ?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{util.eval(parametroUtil.getParametro('pje:tjrn:verificaCEJUSC')) ? '(CEJUSC) Aviso CEJUSC' : '(CEJUSC) Lançar movimento entrada'}" name="(CEJUSC) É CEJUSC ?">
        <transition to="(CEJUSC) Aviso CEJUSC" name="(CEJUSC) Aviso CEJUSC"/>
        <transition to="(CEJUSC) Lançar movimento entrada " name="(CEJUSC) Lançar movimento entrada"/>
    </decision>
    <task-node end-tasks="true" name="(CEJUSC) Designar audiência">
        <task name="(CEJUSC) Designar audiência" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_abaDesignarAudiencia" mapped-name="frame:Processo_Fluxo_abaDesignarAudiencia" access="read,write"/>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Labels: 
..
Processo_Fluxo_abaDesignarAudiencia - > "Designar audiência"


Aviso1 -> ATENÇÃO 01: Caso haja a necessidade de intimar mais de uma parte ao mesmo tempo utilizar a opção "Intimar via mandado/sistema/correio/pessoalmente"

Aviso2 -> ATENÇÃO 02: Caso a intimação seja apenas para o advogado do polo ativo clicar na opção "Intimar via sistema (advogados -Polo Ativo).

#{processoAudienciaHome.obterPossivelAudiencias(orgaoJulgadorManager.findById(105))}...

#{authenticator.getPapelAtual().getIdPapel() == 5886}


expressão p/ quando ativar parnamirim:

#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("NATAL") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 105) :       (authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("MOSSOR") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 99) :  authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("PARNAMIRIM") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 110) : null)}]]>
    

</description>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Análise do CEJUSC"/>
        <transition to="(CEJUSC) Intimar da audiência" name="Intimar via mandado/correios/sistema/pessoalmente"/>
        <transition to="(CEJUSC) Elaborar documento" name="Expedir Ato Ordinatório"/>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idTipoAudiencia', '23,24,25,21')}"/>
            <action name="upd" expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;NATAL&quot;) ? (authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;FAZENDA&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 365) : tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 105)) : (authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;MOSSOR&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 99) :  authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;PARNAMIRIM&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 110) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;CAIC&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 268) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;NOVOS&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 310) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;FERROS&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 309) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;JARDIM DE PIRANHAS&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 318) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;AREIA BRANCA&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 355) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;ASSU&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 356) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;APODI&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 357) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;CEARÁ-MIRIM&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 358) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;MACAÍBA&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 359) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;NOVA CRUZ&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 360) : authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;SANTA CRUZ&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 361) : 
            authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;SÃO GONÇALO DO AMARANTE&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 362) : null)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Análise do CEJUSC">
        <task name="(CEJUSC) Análise do CEJUSC" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Realização da audiência" name="Realizar Audiência">
            <condition expression="#{processoJudicialManager.getProximaAudienciaDesignada(tramitacaoProcessualService.recuperaProcesso(), false) != null}"/>
        </transition>
        <transition to="(CEJUSC) Designar audiência" name="Designar/Cancelar audiência">
            <condition expression="#{!authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;DPVAT&quot;)}"/>
        </transition>
        <transition to="(CEJUSC) Elaborar documento" name="Elaborar documento"/>
        <transition to="(CEJUSC) Intimar da audiência" name="Intimar mandado/correio/sistema/pessoalmente"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências não realizadas" name="Devolver - Não realizado"/>
        <transition to="(CEJUSC) É NATAL ?" name="Designar/Cancelar audiência - DPVAT">
            <condition expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;DPVAT&quot;)}"/>
        </transition>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas sem acordo" name="Devolver - Sem acordo"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas com acordo" name="Devolver - Com acordo"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas sem laudo" name="Devolver - Sem laudo"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas com laudo" name="Devolver - Com laudo"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas com ausência parcial das partes" name="Devolver - Ausência parcial das partes"/>
        <transition to="(CEJUSC) Audiências realizadas com acordo parcial" name="Devolver - Acordo parcial"/>
        <transition to="(CEJUSC) Designar PERÍCIA DPVAT" name="Designar/Cancelar PERÍCiA"/>
        <transition to="(CEJUSC) Intimar da PERÍCIA" name="Intimar mandado/correio/sistema/pessoalmente - PERÍCIA"/>
        <transition to="(CEJUSC) Controle de PERÍCIA do CEJUSC" name="Realizar PERÍCIA"/>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('cancelou:aud:cejusc')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Intimar da audiência">
        <task name="(CEJUSC) Intimar da audiência" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Cancelar e sair da tarefa"/>
        <transition to="(CEJUSC) Separação preparação intimação" name="(CEJUSC) Separação preparação intimação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(CEJUSC) Separação preparação intimação')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S,D,M,L,N,T')}"/>
        </event>
        <event type="node-enter">
            <action name="upd" expression="#{modeloDocumento.set('Processo_Fluxo_prepararExpediente',80)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Intimar da PERÍCIA">
        <task name="(CEJUSC) Intimar da PERÍCIA" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Cancelar e sair da tarefa"/>
        <transition to="(CEJUSC) Separação preparação intimação" name="(CEJUSC) Separação preparação intimação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(CEJUSC) Separação preparação intimação')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S,D,M,L,N,T')}"/>
        </event>
        <event type="node-enter">
            <action name="upd" expression="#{modeloDocumento.set('Processo_Fluxo_prepararExpediente',80)}"/>
        </event>
    </task-node>
    <decision expression="#{conectorMandados.haVariasCentraisMandado() ? '(CEJUSC) Selecionar Central de Mandados' : '(CEJUSC) Junção preparação intimação'}" name="(CEJUSC) Existe alguma Central de Mandados?">
        <transition to="(CEJUSC) Selecionar Central de Mandados" name="(CEJUSC) Selecionar Central de Mandados"/>
        <transition to="(CEJUSC) Junção preparação intimação" name="(CEJUSC) Junção preparação intimação"/>
    </decision>
    <task-node end-tasks="true" name="(CEJUSC) Selecionar Central de Mandados">
        <task name="(CEJUSC) Selecionar Central de Mandados" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_expedientes_centralmandados" mapped-name="frame:Processo_Fluxo_expedientes_centralmandados" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Lançar movimento de Expedição de mandado" name="Finalizar e prosseguir"/>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Processo com prazo em curso">
        <task name="(CEJUSC) Processo com prazo em curso" swimlane="CEJUSC"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Processo com prazo decorrido" name="Processo com prazo decorrido">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Cancelar e sair da tarefa"/>
        <transition to="(CEJUSC) Prazos continuam abertos ?" name="Verificar se há prazo em aberto"/>
        <event type="task-end">
            <action expression="#{taskInstanceUtil.deleteVariableLocally('pje:aguardaPeticao')}"/>
        </event>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Processo com prazo decorrido')}"/>
            <action expression="#{taskInstanceUtil.setVariable('pje:aguardaPeticao', 'true')}"/>
        </event>
    </task-node>
    <decision expression="#{atoComunicacaoService.getAtosComunicacaoAbertos(processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))) &gt; 0 ? 'Processo com prazo em curso' : 'Processo com prazo decorrido'}" name="(CEJUSC) Prazos continuam abertos ?">
        <transition to="(CEJUSC) Processo com prazo em curso" name="Processo com prazo em curso"/>
        <transition to="(CEJUSC) Processo com prazo decorrido" name="Processo com prazo decorrido"/>
    </decision>
    <task-node end-tasks="true" name="(CEJUSC) Processo com prazo decorrido">
        <task name="(CEJUSC) Processo com prazo decorrido" swimlane="CEJUSC"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Cancelar e sair da tarefa"/>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Elaborar documento">
        <task name="(CEJUSC) Elaborar documento" swimlane="CEJUSC">
            <controller>
                <variable name="minutaEmElaboracao" mapped-name="textEditSignature:minutaEmElaboracao" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) É ofício ?" name="É ofício ?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Remover documento temporário cejusc" name="Finalizar e sair da tarefa"/>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','34,57,67')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Finalizar e sair da tarefa')}"/>
        </event>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('É ofício ?')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
    </task-node>
    <decision expression="#{processoDocumentoManager.getProcessoDocumento(tramitacaoProcessualService.recuperaProcesso().getNumeroProcesso(),null, papelDAO.findByCodeName('admin'),null).get(0).getTipoProcessoDocumento().getIdTipoProcessoDocumento() == 34 ? '(CEJUSC) Lançar movimentação ofício' : '(CEJUSC) É ato ordinatório ?'}" name="(CEJUSC) É ofício ?">
        <transition to="(CEJUSC) Lançar movimentação ofício" name="(CEJUSC) Lançar movimentação ofício"/>
        <transition to="(CEJUSC) É ato ordinatório ?" name="(CEJUSC) É ato ordinatório ?"/>
    </decision>
    <decision expression="#{processoDocumentoManager.getProcessoDocumento(tramitacaoProcessualService.recuperaProcesso().getNumeroProcesso(),null, papelDAO.findByCodeName('admin'),null).get(0).getTipoProcessoDocumento().getIdTipoProcessoDocumento() == 67 ? '(CEJUSC) Lançar movimentação de Ato Ordinatório' : '(CEJUSC) Lançar movimentação certidão'}" name="(CEJUSC) É ato ordinatório ?">
        <transition to="(CEJUSC) Lançar movimentação de Ato Ordinatório" name="(CEJUSC) Lançar movimentação de Ato Ordinatório"/>
        <transition to="(CEJUSC) Lançar movimentação certidão" name="(CEJUSC) Lançar movimentação certidão"/>
    </decision>
    <node name="(CEJUSC) Lançar movimentação certidão">
        <transition to="(CEJUSC) Imprimir Documento" name="(CEJUSC) Imprimir Documento"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(60).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(107).lancarMovimento()}"/>
        </event>
    </node>
    <node name="(CEJUSC) Lançar movimentação ofício">
        <transition to="(CEJUSC) Imprimir Documento" name="(CEJUSC) Imprimir Documento"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(60).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(79).lancarMovimento()}"/>
        </event>
    </node>
    <node name="(CEJUSC) Lançar movimentação de Ato Ordinatório">
        <transition to="(CEJUSC) Imprimir Documento" name="(CEJUSC) Imprimir Documento"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(11383).lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(CEJUSC) Assinar documento">
        <task name="(CEJUSC) Assinar documento" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Finalizar e sair">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Imprimir Documento" name="Imprimir Documento">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '34,57')}"/>
        </event>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Imprimir Documento')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Imprimir Documento">
        <task name="(CEJUSC) Imprimir Documento" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_ConsultaProcesso_Detalhe_detalheProcessoVisualizacao" mapped-name="page:Processo_ConsultaProcesso_Detalhe_detalheProcessoVisualizacao" access="read,write"/>
            </controller>
        </task>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Finalizar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
    </task-node>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('cejusc:dpvat')}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
        <task name="Nó de Desvio - (VCiv) Controle do CEJUSC" swimlane="Nó de Desvio - (VCiv) Controle do CEJUSC"/>
        <transition to="Término" name="Término"/>
        <transition to="(CEJUSC) Designar audiência" name="(CEJUSC) Designar audiência"/>
        <transition to="(CEJUSC) Análise do CEJUSC" name="(CEJUSC) Análise do CEJUSC"/>
        <transition to="(CEJUSC) Intimar da audiência" name="(CEJUSC) Intimar da audiência"/>
        <transition to="(CEJUSC) Elaborar documento" name="(CEJUSC) Elaborar documento"/>
        <transition to="(CEJUSC) Processo com prazo em curso" name="(CEJUSC) Processo com prazo em curso"/>
        <transition to="(CEJUSC) Processo com prazo decorrido" name="(CEJUSC) Processo com prazo decorrido"/>
        <transition to="(CEJUSC) Assinar documento" name="(CEJUSC) Assinar documento"/>
        <transition to="(CEJUSC) Imprimir Documento" name="(CEJUSC) Imprimir Documento"/>
        <transition to="(CEJUSC) Informar conteúdo DJe" name="(CEJUSC) Informar conteúdo DJe"/>
        <transition to="(CEJUSC) Ignorar conteúdo DJe" name="(CEJUSC) Ignorar conteúdo DJe"/>
        <transition to="(CEJUSC) Confirmar conteúdo DJe" name="(CEJUSC) Confirmar conteúdo DJe"/>
        <transition to="(CEJUSC) Audiências realizadas sem acordo" name="(CEJUSC) Audiências realizadas sem acordo"/>
        <transition to="(CEJUSC) Audiências realizadas com acordo" name="(CEJUSC) Audiências realizadas com acordo"/>
        <transition to="(CEJUSC) Audiências não realizadas" name="(CEJUSC) Audiências não realizadas"/>
        <transition to="(CEJUSC) Escolher tipo de devolução" name="(CEJUSC) Escolher tipo de devolução"/>
        <transition to="(CEJUSC) Aviso CEJUSC" name="(CEJUSC) Aviso CEJUSC"/>
        <transition to="(CEJUSC) Designar audiência DPVAT" name="(CEJUSC) Designar audiência DPVAT"/>
        <transition to="(CEJUSC) Selecionar CEJUSC" name="(CEJUSC) Selecionar CEJUSC"/>
        <transition to="(CEJUSC) Audiências realizadas com ausência parcial das partes" name="(CEJUSC) Audiências realizadas com ausência parcial das partes"/>
        <transition to="(CEJUSC) Audiências realizadas com acordo parcial" name="(CEJUSC) Audiências realizadas com acordo parcial"/>
        <transition to="(CEJUSC) Selecionar Central de Mandados" name="(CEJUSC) Selecionar Central de Mandados"/>
        <transition to="(CEJUSC) Audiências realizadas sem laudo" name="(CEJUSC) Audiências realizadas sem laudo"/>
        <transition to="(CEJUSC) Audiências realizadas com laudo" name="(CEJUSC) Audiências realizadas com laudo"/>
        <transition to="(CEJUSC) Aviso CEJUSC DPVAT - PERÍCIA" name="(CEJUSC) Aviso CEJUSC DPVAT - PERÍCIA"/>
        <transition to="(CEJUSC) Intimar da PERÍCIA" name="(CEJUSC) Intimar da PERÍCIA"/>
        <transition to="(CEJUSC) Designar PERÍCIA DPVAT" name="(CEJUSC) Designar PERÍCIA DPVAT"/>
        <transition to="(CEJUSC) PERÍCIA realizada" name="(CEJUSC) PERÍCIA realizada"/>
        <transition to="(CEJUSC) PERÍCIA não realizada" name="(CEJUSC) PERÍCIA não realizada"/>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Informar conteúdo DJe">
        <task name="(CEJUSC) Informar conteúdo DJe" swimlane="CEJUSC">
            <controller>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
                <variable name="Aviso2" mapped-name="textAlert:Aviso2" access="read,write"/>
                <variable name="Aviso3" mapped-name="textAlert:Aviso3" access="read,write"/>
                <variable name="vciv_label_magistrado_dje" mapped-name="textAlert:vciv_label_magistrado_dje" access="read,write"/>
                <variable name="vciv_magistrado_dje" mapped-name="combo_objetos:vciv_magistrado_dje" access="read,write"/>
                <variable name="vciv_conteudo_dje" mapped-name="text:vciv_conteudo_dje" access="read,write"/>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Preencheu conteúdo DJe" name="Prosseguir"/>
        <transition to="(CEJUSC) Ignorar conteúdo DJe" name="Cancelar e sair da tarefa"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('magistrado_dje_temp', tramitacaoProcessualService.recuperaVariavelTarefa('combo_objetos:vciv_magistrado_dje').getIdUsuario())}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('combo_objetos:vciv_magistrado_dje')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('conteudo_dje_temp', tramitacaoProcessualService.strToBase64(tramitacaoProcessualService.recuperaVariavelTarefa('text:vciv_conteudo_dje')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('text:vciv_conteudo_dje')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('vciv_conteudo_dje')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Ignorar conteúdo DJe">
        <task name="(CEJUSC) Ignorar conteúdo DJe" swimlane="CEJUSC">
            <controller>
                <variable name="Aviso_DJe" mapped-name="textAlert:Aviso_DJe" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Processo com prazo em curso" name="Sim"/>
        <transition to="(CEJUSC) Informar conteúdo DJe" name="Não"/>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('magistrado_dje_temp') == null || tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp') == &quot;&quot; ? '(CEJUSC) Informar conteúdo DJe' : '(CEJUSC) Confirmar conteúdo DJe'}" name="(CEJUSC) Preencheu conteúdo DJe">
        <transition to="(CEJUSC) Informar conteúdo DJe" name="(CEJUSC) Informar conteúdo DJe"/>
        <transition to="(CEJUSC) Confirmar conteúdo DJe" name="(CEJUSC) Confirmar conteúdo DJe"/>
    </decision>
    <task-node end-tasks="true" name="(CEJUSC) Confirmar conteúdo DJe">
        <task name="(CEJUSC) Confirmar conteúdo DJe" swimlane="CEJUSC">
            <controller>
                <variable name="Aviso4" mapped-name="textAlert:Aviso4" access="read,write"/>
                <variable name="Aviso5" mapped-name="textAlert:Aviso5" access="read,write"/>
                <variable name="Aviso6" mapped-name="textAlert:Aviso6" access="read,write"/>
                <variable name="Aviso7" mapped-name="textAlert:Aviso7" access="read,write"/>
                <variable name="visualizar_dje" mapped-name="textAlert:visualizar_dje" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Informar conteúdo DJe" name="Retornar para ajustar conteúdo"/>
        <transition to="(CEJUSC) Gravar Variáveis DJe" name="Enviar para publicação no DJe"/>
    </task-node>
    <node name="(CEJUSC) Gravar Variáveis DJe">
        <transition to="(CEJUSC) Processo com prazo em curso" name="(CEJUSC) Processo com prazo em curso"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('conteudo_dje', tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp')) }"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('magistrado_dje', tramitacaoProcessualService.recuperaVariavel('magistrado_dje_temp'))}"/>
            <action expression="#{preencherMovimento.deCodigo(1061).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje') ? tramitacaoProcessualService.gravaVariavel('data_dje_direto', dateUtil.getDataAtual('yyyy-MM-dd')) : tramitacaoProcessualService.gravaVariavel('data_dje', dateUtil.getDataAtual('yyyy-MM-dd'))}"/>
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('vciv:cumpridec:publicar_dje') ? tramitacaoProcessualService.gravaVariavel('id_oj_dje_direto', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador) : tramitacaoProcessualService.gravaVariavel('id_oj_dje', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
        </event>
    </node>
    <process-state name="(CEJUSC) Realização da audiência">
        <sub-process name="(VCiv) Controle de audiências do CEJUSC" binding="late"/>
        <transition to="(CEJUSC) Cancelou realizar audiência ?" name="(CEJUSC) Cancelou realizar audiência ?"/>
    </process-state>
    <fork name="(CEJUSC) Separação preparação intimação">
        <transition to="(CEJUSC) É correrio ?" name="(CEJUSC) É correrio ?"/>
        <transition to="(CEJUSC) É mandado ?" name="(CEJUSC) É mandado ?"/>
        <transition to="(CEJUSC) É via sistema ?" name="(CEJUSC) É via sistema ?"/>
    </fork>
    <join name="(CEJUSC) Junção preparação intimação">
        <transition to="(CEJUSC) Informar conteúdo DJe" name="(CEJUSC) Informar conteúdo DJe"/>
    </join>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesCorreios().size() &gt; 0 ? '(CEJUSC) Lançar movimento de Expedição de Aviso de Recebimento' : '(CEJUSC) Junção preparação intimação'}" name="(CEJUSC) É correrio ?">
        <transition to="(CEJUSC) Lançar movimento de Expedição de Aviso de Recebimento" name="(CEJUSC) Lançar movimento de Expedição de Aviso de Recebimento"/>
        <transition to="(CEJUSC) Junção preparação intimação" name="(CEJUSC) Junção preparação intimação"/>
    </decision>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesMandados().size() &gt; 0 ? '(CEJUSC) Existe alguma Central de Mandados?' : '(CEJUSC) Junção preparação intimação'}" name="(CEJUSC) É mandado ?">
        <transition to="(CEJUSC) Junção preparação intimação" name="(CEJUSC) Junção preparação intimação"/>
        <transition to="(CEJUSC) Existe alguma Central de Mandados?" name="(CEJUSC) Existe alguma Central de Mandados?"/>
    </decision>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesEletronico().size() &gt; 0 ? '(CEJUSC) Lançar movimento de Expedição Outros documentos' : '(CEJUSC) Junção preparação intimação'}" name="(CEJUSC) É via sistema ?">
        <transition to="(CEJUSC) Lançar movimento de Expedição Outros documentos" name="(CEJUSC) Lançar movimento de Expedição Outros documentos"/>
        <transition to="(CEJUSC) Junção preparação intimação" name="(CEJUSC) Junção preparação intimação"/>
    </decision>
    <node name="(CEJUSC) Lançar movimento de Expedição de Aviso de Recebimento">
        <transition to="(CEJUSC) Junção preparação intimação" name="(CEJUSC) Junção preparação intimação"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('C', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(74).lancarMovimento()}')}"/>
        </event>
    </node>
    <node name="(CEJUSC) Lançar movimento de Expedição Outros documentos">
        <transition to="(CEJUSC) Junção preparação intimação" name="(CEJUSC) Junção preparação intimação"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('E', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(80).lancarMovimento()}')}"/>
        </event>
    </node>
    <node name="(CEJUSC) Lançar movimento de Expedição de mandado">
        <transition to="(CEJUSC) Junção preparação intimação" name="(CEJUSC) Junção preparação intimação"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('M', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(78).lancarMovimento()}')}"/>
        </event>
    </node>
    <node name="(CEJUSC) Remover documento temporário cejusc">
        <transition to="(CEJUSC) Análise do CEJUSC" name="(CEJUSC) Análise do CEJUSC"/>
        <event type="node-leave">
            <action expression="${documentoJudicialService.removerDocumentoAPartirDeVariavalDeFluxo('minutaEmElaboracao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(CEJUSC) Escolher tipo de devolução">
        <task name="(CEJUSC) Escolher tipo de devolução" swimlane="CEJUSC"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas sem acordo" name="Devolver - Sem acordo"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas com acordo" name="Devolver - Com acordo"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas sem laudo" name="Devolver - Sem laudo"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas com laudo" name="Devolver - Com laudo"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências não realizadas" name="Devolver - Não realizado"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas com ausência parcial das partes" name="Devolver - Ausência parcial das partes"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada audiências realizadas com acordo parcial" name="Devolver - Acordo parcial"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Designar audiência" name="Designar/Cancelar audiência">
            <condition expression="#{!authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;DPVAT&quot;)}"/>
        </transition>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Análise do CEJUSC"/>
        <transition to="(CEJUSC) É NATAL ?" name="Designar/Cancelar audiência - DPVAT">
            <condition expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;DPVAT&quot;)}"/>
        </transition>
        <transition to="(CEJUSC) Deslocar secretaria unificada pericia realizada" name="Devolver - Perícia realizada"/>
        <transition to="(CEJUSC) Deslocar secretaria unificada pericia não realizada" name="Devolver - Perícia não realizada"/>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('cancelou:aud:cejusc')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Aviso CEJUSC">
        <task name="(CEJUSC) Aviso CEJUSC" swimlane="Secretaria">
            <controller>
                <variable name="aviso" mapped-name="textAlert:aviso" access="read,write"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[aviso: Não é possível encaminhar o processo da competência das Varas de Execução Fiscal, Sucessões, Fazenda Pública, Precatórias, Central de Avaliação e arrematação, e dos Juizados Especiais para o CEJUSC. 

aviso2: Além disso, o Centro Judiciário de Solução de Conflitos somente recebe processos das comarca de Natal, Mossoró e Parnamirim.]]></description>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Aviso CEJUSC DPVAT - PERÍCIA">
        <task name="(CEJUSC) Aviso CEJUSC DPVAT - PERÍCIA" swimlane="Secretaria">
            <controller>
                <variable name="aviso" mapped-name="textAlert:aviso" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[aviso: Só é possível encaminhar processos para o CEJUSC DPVAT - PERÍCIA na comarca de Natal.]]></description>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
    </task-node>
    <node name="(CEJUSC) Desclocar DPVAT NATAL">
        <transition to="(CEJUSC) Designar audiência DPVAT" name="(CEJUSC) Designar audiência DPVAT NATAL"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', 106)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', 264)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('cejusc:dpvat', true)}"/>
        </event>
    </node>
    <node name="(CEJUSC) Desclocar DPVAT NATAL PERÍCIA">
        <transition to="(CEJUSC) Designar PERÍCIA DPVAT" name="(CEJUSC) Designar PERÍCIA DPVAT"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', 106)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', 264)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('cejusc:dpvat', true)}"/>
        </event>
    </node>
    <node name="(CEJUSC) Desclocar DPVAT MOSSORO">
        <transition to="(CEJUSC) Designar audiência DPVAT" name="(CEJUSC) Designar audiência DPVAT MOSSORO"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', 107)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', 265)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('cejusc:dpvat', true)}"/>
        </event>
    </node>
    <node name="(CEJUSC) Desclocar DPVAT PARNAMIRIM">
        <transition to="(CEJUSC) Designar audiência DPVAT" name="(CEJUSC) Designar audiência DPVAT PARNAMIRIM"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', 108)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', 266)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('cejusc:dpvat', true)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(CEJUSC) Designar audiência DPVAT">
        <task name="(CEJUSC) Designar audiência DPVAT" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_abaDesignarAudiencia" mapped-name="frame:Processo_Fluxo_abaDesignarAudiencia" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Labels: 
..
Processo_Fluxo_abaDesignarAudiencia - > "Designar audiência"


Aviso1 -> ATENÇÃO 01: Caso haja a necessidade de intimar mais de uma parte ao mesmo tempo utilizar a opção "Intimar via mandado/sistema/correio/pessoalmente"

Aviso2 -> ATENÇÃO 02: Caso a intimação seja apenas para o advogado do polo ativo clicar na opção "Intimar via sistema (advogados -Polo Ativo).

#{processoAudienciaHome.obterPossivelAudiencias(orgaoJulgadorManager.findById(105))}...

#{authenticator.getPapelAtual().getIdPapel() == 5886}


expressão p/ quando ativar parnamirim:

#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("NATAL") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 105) :       (authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("MOSSOR") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 99) :  authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("PARNAMIRIM") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 107) : null)}]]></description>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Análise do CEJUSC"/>
        <transition to="(CEJUSC) Intimar da audiência" name="Intimar via mandado/correios/sistema/pessoalmente"/>
        <transition to="(CEJUSC) Elaborar documento" name="Expedir Ato Ordinatório"/>
        <transition to="(CEJUSC) Designar PERÍCIA DPVAT" name="Designar PERÍCIA DPVAT"/>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idTipoAudiencia', 21)}"/>
            <action name="upd" expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;CEJUSC DPVAT NATAL&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 106) :       (authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;CEJUSC DPVAT MOSSOR&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 107) :  authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;CEJUSC DPVAT PARNAMIRIM&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 108) : null)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Designar PERÍCIA DPVAT">
        <task name="(CEJUSC) Designar PERÍCIA DPVAT" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_abaDesignarAudiencia" mapped-name="frame:Processo_Fluxo_abaDesignarAudiencia" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Labels: 
..
Processo_Fluxo_abaDesignarAudiencia - > "Designar PERÍCIA DPVAT"


Aviso1 -> ATENÇÃO 01: Caso haja a necessidade de intimar mais de uma parte ao mesmo tempo utilizar a opção "Intimar via mandado/sistema/correio/pessoalmente"

Aviso2 -> ATENÇÃO 02: Caso a intimação seja apenas para o advogado do polo ativo clicar na opção "Intimar via sistema (advogados -Polo Ativo).

#{processoAudienciaHome.obterPossivelAudiencias(orgaoJulgadorManager.findById(105))}...

#{authenticator.getPapelAtual().getIdPapel() == 5886}


expressão p/ quando ativar parnamirim:

#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("NATAL") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 105) :       (authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("MOSSOR") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 99) :  authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains("PARNAMIRIM") ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 107) : null)}]]></description>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) Análise do CEJUSC" name="Análise do CEJUSC"/>
        <transition to="(CEJUSC) Intimar da PERÍCIA" name="Intimar via mandado/correios/sistema/pessoalmente"/>
        <transition to="(CEJUSC) Elaborar documento" name="Expedir Ato Ordinatório"/>
        <transition to="(CEJUSC) Designar audiência DPVAT" name="Designar audiência DPVAT"/>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idTipoAudiencia', 26)}"/>
            <action name="upd" expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;CEJUSC DPVAT NATAL&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 106) :       (authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;CEJUSC DPVAT MOSSOR&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 107) :  authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;CEJUSC DPVAT PARNAMIRIM&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 108) : null)}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('cancelou:aud:cejusc') != null ? '(CEJUSC) Análise do CEJUSC':'(CEJUSC) Escolher tipo de devolução'}" name="(CEJUSC) Cancelou realizar audiência ?">
        <transition to="(CEJUSC) Análise do CEJUSC" name="(CEJUSC) Análise do CEJUSC"/>
        <transition to="(CEJUSC) Escolher tipo de devolução" name="(CEJUSC) Escolher tipo de devolução"/>
    </decision>
    <task-node end-tasks="true" name="(CEJUSC) Selecionar CEJUSC">
        <task name="(CEJUSC) Selecionar CEJUSC" swimlane="Secretaria">
            <controller>
                <variable name="aviso" mapped-name="textAlert:aviso" access="read,write"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read,write"/>
                <variable name="aviso3" mapped-name="textAlert:aviso3" access="read,write"/>
                <variable name="aviso4" mapped-name="textAlert:aviso4" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[aviso:Selecione para qual CEJUSC deseja encaminhar o processo:
aviso2:A opção "CEJUSC" encaminhará o processo para a marcação de audiência de conciliação cível ou família, bem como mediação cível ou família.
aviso3:A opção "CEJUSC - DPVAT" encaminhará o processo para a marcação de audiência de conciliação específica do DPVAT.
aviso4:A opção "CEJUSC - DPVAT - PERÍCIA" encaminhará o processo para a realização de perícias referentes ao DPVAT.]]></description>
        <transition to="(CEJUSC) Designar audiência" name="CEJUSC"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(CEJUSC) É NATAL ?" name="CEJUSC - DPVAT"/>
        <transition to="(CEJUSC) É NATAL DPVAT PERÍCIA ?" name="CEJUSC - DPVAT - PERÍCIA"/>
    </task-node>
    <decision expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;NATAL&quot;) || authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;MOSSOR&quot;) || authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;PARNAMIRIM&quot;) ? '(CEJUSC) Selecionar CEJUSC' : '(CEJUSC) Designar audiência'}" name="(CEJUSC) É Natal Mossoró Ou Parnamirim ?">
        <transition to="(CEJUSC) Selecionar CEJUSC" name="(CEJUSC) Selecionar CEJUSC"/>
        <transition to="(CEJUSC) Designar audiência" name="(CEJUSC) Designar audiência"/>
    </decision>
    <decision expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;NATAL&quot;) ? '(CEJUSC) Desclocar DPVAT NATAL' : '(CEJUSC) É MOSSORÓ ?'}" name="(CEJUSC) É NATAL ?">
        <transition to="(CEJUSC) Desclocar DPVAT NATAL" name="(CEJUSC) Desclocar DPVAT NATAL"/>
        <transition to="(CEJUSC) É MOSSORÓ ?" name="(CEJUSC) É MOSSORÓ ?"/>
    </decision>
    <decision expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;NATAL&quot;) ? '(CEJUSC) Desclocar DPVAT NATAL PERÍCIA' : '(CEJUSC) Aviso CEJUSC DPVAT - PERÍCIA'}" name="(CEJUSC) É NATAL DPVAT PERÍCIA ?">
        <transition to="(CEJUSC) Aviso CEJUSC DPVAT - PERÍCIA" name="(CEJUSC) Aviso CEJUSC DPVAT - PERÍCIA"/>
        <transition to="(CEJUSC) Desclocar DPVAT NATAL PERÍCIA" name="(CEJUSC) Desclocar DPVAT NATAL PERÍCIA"/>
    </decision>
    <decision expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;MOSSOR&quot;) ? '(CEJUSC) Desclocar DPVAT MOSSORO' : '(CEJUSC) É PARNAMIRIM ?'}" name="(CEJUSC) É MOSSORÓ ?">
        <transition to="(CEJUSC) Desclocar DPVAT MOSSORO" name="(CEJUSC) Desclocar DPVAT MOSSORO"/>
        <transition to="(CEJUSC) É PARNAMIRIM ?" name="(CEJUSC) É PARNAMIRIM ?"/>
    </decision>
    <decision expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;PARNAMIRIM&quot;) ? '(CEJUSC) Desclocar DPVAT PARNAMIRIM' : '(CEJUSC) Selecionar CEJUSC'}" name="(CEJUSC) É PARNAMIRIM ?">
        <transition to="(CEJUSC) Desclocar DPVAT PARNAMIRIM" name="(CEJUSC) Desclocar DPVAT PARNAMIRIM"/>
        <transition to="(CEJUSC) Selecionar CEJUSC" name="(CEJUSC) Selecionar CEJUSC"/>
    </decision>
    <node name="(CEJUSC) Lançar movimento entrada ">
        <transition to="(CEJUSC) É Natal Mossoró Ou Parnamirim ?" name="(CEJUSC) É Natal Mossoró Ou Parnamirim ?"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('CEJUSC').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('juizo de origem').lancarMovimento()}"/>
        </event>
    </node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada audiências realizadas sem acordo">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) Audiências realizadas sem acordo" name="(CEJUSC) Audiências realizadas sem acordo"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) Audiências realizadas sem acordo">
        <task name="(CEJUSC) Audiências realizadas sem acordo" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada audiências realizadas com acordo">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) Audiências realizadas com acordo" name="(CEJUSC) Audiências realizadas com acordo"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) Audiências realizadas com acordo">
        <task name="(CEJUSC) Audiências realizadas com acordo" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada audiências realizadas sem laudo">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) Audiências realizadas sem laudo" name="(CEJUSC) Audiências realizadas sem laudo"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) Audiências realizadas sem laudo">
        <task name="(CEJUSC) Audiências realizadas sem laudo" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: movimentarLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada audiências realizadas com laudo">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) Audiências realizadas com laudo" name="(CEJUSC) Audiências realizadas com laudo"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) Audiências realizadas com laudo">
        <task name="(CEJUSC) Audiências realizadas com laudo" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: movimentarLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada audiências não realizadas">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) Audiências não realizadas" name="(CEJUSC) Audiências não realizadas"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) Audiências não realizadas">
        <task name="(CEJUSC) Audiências não realizadas" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada audiências realizadas com ausência parcial das partes">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) Audiências realizadas com ausência parcial das partes" name="(CEJUSC) Audiências realizadas com ausência parcial das partes"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) Audiências realizadas com ausência parcial das partes">
        <task name="(CEJUSC) Audiências realizadas com ausência parcial das partes" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada audiências realizadas com acordo parcial">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) Audiências realizadas com acordo parcial" name="(CEJUSC) Audiências realizadas com acordo parcial"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) Audiências realizadas com acordo parcial">
        <task name="(CEJUSC) Audiências realizadas com acordo parcial" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada pericia realizada">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) PERÍCIA realizada" name="(CEJUSC) PERÍCIA realizada"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) PERÍCIA realizada">
        <task name="(CEJUSC) PERÍCIA realizada" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Deslocar secretaria unificada pericia não realizada">
        <sub-process name="(SEC) Deslocamento para secretaria unificada" binding="late"/>
        <transition to="(CEJUSC) PERÍCIA não realizada" name="(CEJUSC) PERÍCIA não realizada"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino'), tramitacaoProcessualService.recuperaVariavel('pje:fluxo:deslocamento:colegiadoDestino'))}"/>
            <action expression="#{entityManager.createNativeQuery(parametroUtil.getParametro(pje:tjrn:sqlLimpezaUnificada')).setParameter('numeroProcesso', tramitacaoProcessualService.recuperaProcesso().getProcesso().getNumeroProcesso()).executeUpdate()}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(CEJUSC) PERÍCIA não realizada">
        <task name="(CEJUSC) PERÍCIA não realizada" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (VCiv) Controle do CEJUSC" name="Nó de Desvio - (VCiv) Controle do CEJUSC">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('juizo de origem').comComplementoDeCodigo(18).doTipoLivre().preencherComTexto('CEJUSC').lancarMovimento()}"/>
        </event>
    </task-node>
    <process-state name="(CEJUSC) Controle de PERÍCIA do CEJUSC">
        <sub-process name="(VCiv) Controle de audiências do CEJUSC - PERÍCIA" binding="late"/>
        <transition to="(CEJUSC) Cancelou realizar audiência ?" name="(CEJUSC) Cancelou realizar audiência ?"/>
    </process-state>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
